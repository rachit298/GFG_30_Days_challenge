//{ Driver Code Starts
//Initial template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG
{
    public static void main (String[] args)
	{
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-->0)
        {
            int n = sc.nextInt();
            int arr[]= new int[n];
            for(int i=0; i<n; i++)
                arr[i] = sc.nextInt();
            Solution ob = new Solution();
            if(ob.recreationalSpot(arr,n))
                System.out.println("True");
            else
                System.out.println("False");
        }
	}
}
// } Driver Code Ends


//User function template for C++

class Solution{
    static boolean recreationalSpot(int[] arr , int n){
        
        if(arr.length <= 2){
            return false;
        }
        
        Stack<Integer> st = new Stack<>();
        
        int third_build = Integer.MIN_VALUE;
        
        // since we have to use only O(n) time we can only find one value with loop
        // and we have to keep track of other two values using stack and 'third_build' variable
        // we find first building through loop and other two while iterating
        for(int index = n-1; index >= 0; index--){
            
            if(arr[index] < third_build) return true;
            
            while(!st.isEmpty() && st.peek() < arr[index]){
                
                third_build = st.peek();
                st.pop();
            }
            
            st.push(arr[index]);
        }
        
        return false;
    }
};
