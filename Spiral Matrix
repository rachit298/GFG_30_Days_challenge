//{ Driver Code Starts
import java.util.*;

class Find_Given_Element_Of_Spiral_Matrix 
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int k = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			Solution obj = new Solution();
			System.out.println(obj.findK(arr, n, m, k));
		t--;
		}
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
   
	public int findK(int a[][], int n, int m, int k)
	{
	    int col_start = 0, col_end = m-1, row_start = 0, row_end = n-1;
	    
	    int total_elements = n*m;
	    
	    int required_element = 0;
	    
	    while(total_elements > 0){
	        
	        for(int row = row_start, col = col_start; col <= col_end && total_elements > 0; col++){
	            required_element++;
	            if(required_element == k){
	                required_element = a[row][col];
	                return required_element;
	            }
	            total_elements++;
	        }
	        row_start++;
	        
	        for(int row = row_start, col = col_end; row <= row_end && total_elements > 0; row++){
	            required_element++;
	            if(required_element == k){
	                required_element = a[row][col];
	                return required_element;
	            }
	            total_elements++;
	        }
	        col_end--;
	        
	        for(int row = row_end, col = col_end; col >= col_start && total_elements > 0; col--){
	            required_element++;
	            if(required_element == k){
	                required_element = a[row][col];
	                return required_element;
	            }
	            total_elements++;
	        }
	        row_end--;
	        
	        for(int row = row_end, col = col_start; row >= row_start && total_elements > 0; row--){
	            required_element++;
	            if(required_element == k){
	                required_element = a[row][col];
	                return required_element;
	            }
	            total_elements++;
	        }
	        col_start++;
	    }
	    
	    return required_element;
	}
	
}
