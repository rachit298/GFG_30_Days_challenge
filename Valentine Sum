//{ Driver Code Starts
import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        // Starting from the second element
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();
                
            // Get the current node's value from the string
            String currVal = ip[i];
                
            // If the left child is not null
            if(!currVal.equals("N")) {
                    
                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }
                
            // For the right child
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            // If the right child is not null
            if(!currVal.equals("N")) {
                    
                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    
	public static void main (String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int t=Integer.parseInt(br.readLine());
        
        while(t > 0){
            String line = br.readLine().trim();
            Node root = buildTree(line);
            
            line = br.readLine().trim();
            String target_k[] = line.split(" ");
            int target = Integer.parseInt(target_k[0]);
            int k = Integer.parseInt(target_k[1]);
            
            Solution x = new Solution();
            System.out.println( x.sum_at_distK(root, target, k) );
            t--;
        }
    }
}


// } Driver Code Ends


/*
// node structure:

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

*/

class Solution{
    
    static HashSet<Node> set;
    static HashMap<Node, Node> parent;
    
    static int sum_at_distK(Node root, int target, int k){
        
        parent = new HashMap<>();
        set = new HashSet<>();
        
        parent.put(root, null);
        putAllParents(root);

        Node t = findTarget(root, target);
        
        int ans = findSum(t, k, 0);
        int x = findUpSum(t, 0, k);
        
        return ans + x;
    }
    
     static void putAllParents(Node root) {
        if (root.left != null) {
            parent.put(root.left, root);
            putAllParents(root.left);
        }

        if (root.right != null) {
            parent.put(root.right, root);
            putAllParents(root.right);
        }
    }
    
    static Node findTarget(Node root, int target) {
        if (root == null)
            return null;

        if (root.data == target)
            return root;

        Node left = findTarget(root.left, target);
        Node right = findTarget(root.right, target);

        if (left != null)
            return left;

        return right;
    }
    
    static int findSum(Node root, int k, int count) {
        if (count > k || root == null || set.contains(root))
            return 0;

        count++;
        set.add(root);

        int left = findSum(root.left, k, count);
        int right = findSum(root.right, k, count);

        return left + right + root.data;
    }
    
    static int findUpSum(Node root, int count, int k) {
        if (count > k || root == null)
            return 0;

        count++;
        Node p = parent.get(root);

        if (p == null)
            return 0;

        int ans = findSum(p, k, count);
        ans += findUpSum(p, count, k);

        return ans;
    }
}

